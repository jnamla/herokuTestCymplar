var ObjectUtil = (function () {
    function ObjectUtil() {
    }
    ObjectUtil.nextId = function () {
        return "" + ++ObjectUtil._seq;
    };
    ObjectUtil.clone = function (data) {
        return JSON.parse(JSON.stringify(data));
    };
    ObjectUtil.merge = function (dest, src) {
        if (ObjectUtil.isBlank(src)) {
            return dest;
        }
        if (ObjectUtil.isBlank(dest)) {
            return src;
        }
        for (var prop in src) {
            dest[prop] = src[prop];
        }
    };
    ObjectUtil.isPresent = function (data) {
        return !ObjectUtil.isBlank(data);
    };
    ObjectUtil.isBlank = function (data) {
        return data === undefined || data === null;
    };
    ObjectUtil.createFilter = function (data, regExp) {
        if (data === void 0) { data = {}; }
        if (regExp === void 0) { regExp = true; }
        var regObjId = new RegExp('^[0-9a-fA-F]{24}$');
        var filters = {};
        for (var entry in data) {
            if (ObjectUtil.isPresent(data[entry])) {
                if (regExp && typeof data[entry] === 'string' && !regObjId.test(data[entry])) {
                    filters[entry] = new RegExp(data[entry], 'i');
                }
                else {
                    filters[entry] = data[entry];
                }
            }
        }
        return filters;
    };
    ObjectUtil._seq = 0;
    return ObjectUtil;
})();
exports.ObjectUtil = ObjectUtil;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvdXRpbC50cyIsImNvcmUvdXRpbC5qcyJdLCJuYW1lcyI6WyJPYmplY3RVdGlsIiwiT2JqZWN0VXRpbC5uZXh0SWQiLCJPYmplY3RVdGlsLmNsb25lIiwiT2JqZWN0VXRpbC5tZXJnZSIsIk9iamVjdFV0aWwuaXNQcmVzZW50IiwiT2JqZWN0VXRpbC5pc0JsYW5rIiwiT2JqZWN0VXRpbC5jcmVhdGVGaWx0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsYUFBQSxDQUFBLFlBQUE7SUFBQUEsU0FBQUEsYUFBQUE7O0lBSVFBLFdBQUFBLFNBQVBBLFlBQUFBO1FBQ0NDLE9BQU9BLEtBQUdBLEVBQUVBLFdBQVdBOztJQUdqQkQsV0FBQUEsUUFBUEEsVUFBYUEsTUFBU0E7UUFDckJFLE9BQU9BLEtBQUtBLE1BQU1BLEtBQUtBLFVBQVVBOztJQUczQkYsV0FBQUEsUUFBUEEsVUFBYUEsTUFBY0EsS0FBV0E7UUFDckNHLElBQUlBLFdBQVdBLFFBQVFBLE1BQU1BO1lBQzVCQSxPQUFPQTs7UUFFUkEsSUFBSUEsV0FBV0EsUUFBUUEsT0FBT0E7WUFDN0JBLE9BQU9BOztRQUVSQSxLQUFLQSxJQUFJQSxRQUFRQSxLQUFLQTtZQUNyQkEsS0FBS0EsUUFBUUEsSUFBSUE7OztJQUlaSCxXQUFBQSxZQUFQQSxVQUFpQkEsTUFBU0E7UUFDekJJLE9BQU9BLENBQUNBLFdBQVdBLFFBQVFBOztJQUdyQkosV0FBQUEsVUFBUEEsVUFBZUEsTUFBU0E7UUFDdkJLLE9BQU9BLFNBQVNBLGFBQWFBLFNBQVNBOztJQUdoQ0wsV0FBQUEsZUFBUEEsVUFBb0JBLE1BQVdBLFFBQWFBO1FBQXhCTSxJQUFBQSxTQUFBQSxLQUFBQSxHQUFTQSxFQUFUQSxPQUFBQTtRQUFXQSxJQUFBQSxXQUFBQSxLQUFBQSxHQUFhQSxFQUFiQSxTQUFBQTtRQUc5QkEsSUFBTUEsV0FBV0EsSUFBSUEsT0FBT0E7UUFDNUJBLElBQUlBLFVBQVVBO1FBR2RBLEtBQUtBLElBQU1BLFNBQVNBLE1BQU1BO1lBQ3RCQSxJQUFJQSxXQUFXQSxVQUFVQSxLQUFLQSxTQUFTQTtnQkFDdENBLElBQUlBLFVBQVVBLE9BQU9BLEtBQUtBLFdBQVdBLFlBQVlBLENBQUNBLFNBQVNBLEtBQUtBLEtBQUtBLFNBQVNBO29CQUNoRkEsUUFBUUEsU0FBU0EsSUFBSUEsT0FBT0EsS0FBS0EsUUFBUUE7O3FCQUNoQ0E7b0JBQ05BLFFBQVFBLFNBQVNBLEtBQUtBOzs7O1FBSTVCQSxPQUFPQTs7SUE5Q09OLFdBQUFBLE9BQU9BO0lBZ0R2QkEsT0FBQUE7O0FBbERhLFFBQUEsYUFBVTtBQytDdkIiLCJmaWxlIjoiY29yZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE9iamVjdFV0aWwge1xuXG5cdHByaXZhdGUgc3RhdGljIF9zZXEgPSAwO1xuXG5cdHN0YXRpYyBuZXh0SWQoKSB7XG5cdFx0cmV0dXJuIGAkeysrT2JqZWN0VXRpbC5fc2VxfWA7XG5cdH1cblxuXHRzdGF0aWMgY2xvbmUoZGF0YTogYW55KTogYW55IHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cdH1cblxuXHRzdGF0aWMgbWVyZ2UoZGVzdDogT2JqZWN0LCBzcmM6IE9iamVjdCkge1xuXHRcdGlmIChPYmplY3RVdGlsLmlzQmxhbmsoc3JjKSkge1xuXHRcdFx0cmV0dXJuIGRlc3Q7XG5cdFx0fVxuXHRcdGlmIChPYmplY3RVdGlsLmlzQmxhbmsoZGVzdCkpIHtcblx0XHRcdHJldHVybiBzcmM7XG5cdFx0fVxuXHRcdGZvciAobGV0IHByb3AgaW4gc3JjKSB7XG5cdFx0XHRkZXN0W3Byb3BdID0gc3JjW3Byb3BdO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBpc1ByZXNlbnQoZGF0YTogYW55KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuICFPYmplY3RVdGlsLmlzQmxhbmsoZGF0YSk7XG5cdH1cblxuXHRzdGF0aWMgaXNCbGFuayhkYXRhOiBhbnkpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09IG51bGw7XG5cdH1cblx0XG5cdHN0YXRpYyBjcmVhdGVGaWx0ZXIoZGF0YSA9IHt9LCByZWdFeHAgPSB0cnVlKTogYW55IHtcblx0XHRcblx0XHQvL1RPRE8gQ29uc3VsdCBpZiBpdCBzaG91bGQgYmUgbW92ZWQgdG8gdGhlIHNlcnZlciBmb2xkZXIgaW4gb3JkZXIgdG8gdXNlIG1vbmdvb3NlIHR5cGVzXG5cdFx0Y29uc3QgcmVnT2JqSWQgPSBuZXcgUmVnRXhwKCdeWzAtOWEtZkEtRl17MjR9JCcpO1xuXHRcdGxldCBmaWx0ZXJzID0ge307XG5cdFx0XG5cdFx0Ly8gUmVndWxhciBleHByZXNpb24gdG8gc2ltcGxpZnkgdGhlIHNlYXJjaFxuXHRcdGZvciAoY29uc3QgZW50cnkgaW4gZGF0YSkge1xuXHRcdCAgICBpZiAoT2JqZWN0VXRpbC5pc1ByZXNlbnQoZGF0YVtlbnRyeV0pKSB7XG5cdFx0ICAgIFx0aWYgKHJlZ0V4cCAmJiB0eXBlb2YgZGF0YVtlbnRyeV0gPT09ICdzdHJpbmcnICYmICFyZWdPYmpJZC50ZXN0KGRhdGFbZW50cnldKSkge1xuXHRcdFx0XHRcdGZpbHRlcnNbZW50cnldID0gbmV3IFJlZ0V4cChkYXRhW2VudHJ5XSwgJ2knKTtcblx0XHQgICAgXHR9IGVsc2Uge1xuXHRcdCAgICBcdFx0ZmlsdGVyc1tlbnRyeV0gPSBkYXRhW2VudHJ5XTtcblx0XHQgICAgXHR9XG5cdFx0ICAgIH0gXG5cdFx0fVxuXHRcdHJldHVybiBmaWx0ZXJzO1xuXHR9XG59XG4iLCJ2YXIgT2JqZWN0VXRpbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JqZWN0VXRpbCgpIHtcbiAgICB9XG4gICAgT2JqZWN0VXRpbC5uZXh0SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgKytPYmplY3RVdGlsLl9zZXE7XG4gICAgfTtcbiAgICBPYmplY3RVdGlsLmNsb25lID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH07XG4gICAgT2JqZWN0VXRpbC5tZXJnZSA9IGZ1bmN0aW9uIChkZXN0LCBzcmMpIHtcbiAgICAgICAgaWYgKE9iamVjdFV0aWwuaXNCbGFuayhzcmMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0VXRpbC5pc0JsYW5rKGRlc3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3JjO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc3JjKSB7XG4gICAgICAgICAgICBkZXN0W3Byb3BdID0gc3JjW3Byb3BdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3RVdGlsLmlzUHJlc2VudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiAhT2JqZWN0VXRpbC5pc0JsYW5rKGRhdGEpO1xuICAgIH07XG4gICAgT2JqZWN0VXRpbC5pc0JsYW5rID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhID09PSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0VXRpbC5jcmVhdGVGaWx0ZXIgPSBmdW5jdGlvbiAoZGF0YSwgcmVnRXhwKSB7XG4gICAgICAgIGlmIChkYXRhID09PSB2b2lkIDApIHsgZGF0YSA9IHt9OyB9XG4gICAgICAgIGlmIChyZWdFeHAgPT09IHZvaWQgMCkgeyByZWdFeHAgPSB0cnVlOyB9XG4gICAgICAgIHZhciByZWdPYmpJZCA9IG5ldyBSZWdFeHAoJ15bMC05YS1mQS1GXXsyNH0kJyk7XG4gICAgICAgIHZhciBmaWx0ZXJzID0ge307XG4gICAgICAgIGZvciAodmFyIGVudHJ5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3RVdGlsLmlzUHJlc2VudChkYXRhW2VudHJ5XSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwICYmIHR5cGVvZiBkYXRhW2VudHJ5XSA9PT0gJ3N0cmluZycgJiYgIXJlZ09iaklkLnRlc3QoZGF0YVtlbnRyeV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbZW50cnldID0gbmV3IFJlZ0V4cChkYXRhW2VudHJ5XSwgJ2knKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbZW50cnldID0gZGF0YVtlbnRyeV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH07XG4gICAgT2JqZWN0VXRpbC5fc2VxID0gMDtcbiAgICByZXR1cm4gT2JqZWN0VXRpbDtcbn0pKCk7XG5leHBvcnRzLk9iamVjdFV0aWwgPSBPYmplY3RVdGlsO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
