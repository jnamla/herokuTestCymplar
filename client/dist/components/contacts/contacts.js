angular.module('app.contacts', [
    'ui.router'
])
    .config(config);
function config($stateProvider) {
    var url = '/api/contact';
    $stateProvider
        .state('contacts', {
        abstract: true,
        url: '/contacts',
        templateUrl: 'components/contacts/contacts.html'
    })
        .state('contacts.list', {
        url: '',
        templateUrl: 'components/contacts/contacts.list.html',
        controller: ['$scope', '$state', '$http',
            function ($scope, $state, $http) {
                $http.get(url).then(function (resp) {
                    $scope.contacts = resp.data;
                });
            }]
    })
        .state('contacts.detail', {
        url: '/{contactId:[^/]+}',
        views: {
            '': {
                templateUrl: 'components/contacts/contacts.detail.html',
                controller: ['$scope', '$stateParams', '$http',
                    function ($scope, $stateParams, $http) {
                        $http.get(url + "/" + $stateParams.contactId).then(function (resp) {
                            $scope.contact = resp.data;
                        });
                    }]
            }
        }
    });
}
config.$inject = ["$stateProvider"];

//# sourceMappingURL=data:application/json;base64,
