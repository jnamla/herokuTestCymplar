var main_1 = require('./components/main/main');
require('./components/contacts/contacts');
var navbar_directive_1 = require('./components/navbar/navbar.directive');
var app;
(function (app) {
    function runBlock($rootScope, $log, $state, $stateParams) {
        $rootScope['$state'] = $state;
        $rootScope['$stateParams'] = $stateParams;
        $log.debug('runBlock end');
    }
    runBlock.$inject = ["$rootScope", "$log", "$state", "$stateParams"];
    function config($logProvider, toastrConfig) {
        $logProvider.debugEnabled(true);
        toastrConfig.allowHtml = true;
        toastrConfig.timeOut = 3000;
        toastrConfig.positionClass = 'toast-top-right';
        toastrConfig.preventDuplicates = true;
        toastrConfig.progressBar = true;
    }
    config.$inject = ["$logProvider", "toastrConfig"];
    function routerConfig($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('main', {
            url: '/',
            templateUrl: 'components/main/main.html',
            controller: 'MainController',
            controllerAs: 'main'
        });
        $urlRouterProvider.otherwise('/');
    }
    routerConfig.$inject = ["$stateProvider", "$urlRouterProvider"];
    angular.module('app', [
        'ngAnimate',
        'ngTouch',
        'ngSanitize',
        'ngMessages',
        'ui.router',
        'ui.bootstrap',
        'toastr',
        'app.contacts'
    ])
        .config(config)
        .config(routerConfig)
        .run(runBlock)
        .constant('moment', moment)
        .controller('MainController', main_1.MainController)
        .directive('mainNavbar', navbar_directive_1.mainNavbar);
    var appContainer = document.documentElement;
    appContainer.setAttribute('ng-strict-di', 'true');
    angular.bootstrap(appContainer, ['app']);
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC50cyIsImJvb3RzdHJhcC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhcHAucnVuQmxvY2siLCJhcHAuY29uZmlnIiwiYXBwLnJvdXRlckNvbmZpZyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxTQUFBLFFBQStCO0FBQy9CLFFBQU87QUFDUCxJQUFBLHFCQUFBLFFBQTJCO0FBSTNCLElBQVU7QUFBVixDQUFBLFVBQVUsS0FBSTtJQUdaQSxTQUFBQSxTQUFrQkEsWUFBdUNBLE1BQTJCQSxRQUFhQSxjQUFpQkE7UUFNaEhDLFdBQVdBLFlBQVlBO1FBQ3ZCQSxXQUFXQSxrQkFBa0JBO1FBRTdCQSxLQUFLQSxNQUFNQTs7O0lBSWJELFNBQUFBLE9BQWdCQSxjQUFvQ0EsY0FBaUJBO1FBRW5FRSxhQUFhQSxhQUFhQTtRQUUxQkEsYUFBYUEsWUFBWUE7UUFDekJBLGFBQWFBLFVBQVVBO1FBQ3ZCQSxhQUFhQSxnQkFBZ0JBO1FBQzdCQSxhQUFhQSxvQkFBb0JBO1FBQ2pDQSxhQUFhQSxjQUFjQTs7O0lBSTdCRixTQUFBQSxhQUFzQkEsZ0JBQTJDQSxvQkFBaURBO1FBQ2hIRzthQUNHQSxNQUFNQSxRQUFRQTtZQUNiQSxLQUFLQTtZQUNMQSxhQUFhQTtZQUNiQSxZQUFZQTtZQUNaQSxjQUFjQTs7UUFFbEJBLG1CQUFtQkEsVUFBVUE7OztJQUcvQkgsUUFBUUEsT0FBT0EsT0FBT0E7UUFDcEJBO1FBQ0FBO1FBQ0FBO1FBQ0FBO1FBQ0FBO1FBQ0FBO1FBQ0FBO1FBQ0FBOztTQUVDQSxPQUFPQTtTQUNQQSxPQUFPQTtTQUNQQSxJQUFJQTtTQUNKQSxTQUFTQSxVQUFVQTtTQUNuQkEsV0FBV0Esa0JBQWtCQSxPQUFBQTtTQUM3QkEsVUFBVUEsY0FBY0EsbUJBQUFBO0lBRTNCQSxJQUFNQSxlQUFlQSxTQUFTQTtJQUM5QkEsYUFBYUEsYUFBYUEsZ0JBQWdCQTtJQUMxQ0EsUUFBUUEsVUFBVUEsY0FBY0EsQ0FBQ0E7R0ExRHpCLFFBQUEsTUFBRztBQzBDYiIsImZpbGUiOiJib290c3RyYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWluQ29udHJvbGxlciB9IGZyb20gJy4vY29tcG9uZW50cy9tYWluL21haW4nO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvY29udGFjdHMvY29udGFjdHMnO1xuaW1wb3J0IHsgbWFpbk5hdmJhciB9IGZyb20gJy4vY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmRpcmVjdGl2ZSc7XG5cbmRlY2xhcmUgdmFyIG1vbWVudDogbW9tZW50Lk1vbWVudFN0YXRpYztcblxubmFtZXNwYWNlIGFwcCB7XG4gIFxuICAvKiogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIHJ1bkJsb2NrKCRyb290U2NvcGU6IGFuZ3VsYXIuSVJvb3RTY29wZVNlcnZpY2UsICRsb2c6IGFuZ3VsYXIuSUxvZ1NlcnZpY2UsICRzdGF0ZTogYW55LCAkc3RhdGVQYXJhbXM6IGFueSkge1xuIFxuICAgIC8vIEl0J3MgdmVyeSBoYW5keSB0byBhZGQgcmVmZXJlbmNlcyB0byAkc3RhdGUgYW5kICRzdGF0ZVBhcmFtcyB0byB0aGUgJHJvb3RTY29wZVxuICAgIC8vIHNvIHRoYXQgeW91IGNhbiBhY2Nlc3MgdGhlbSBmcm9tIGFueSBzY29wZSB3aXRoaW4geW91ciBhcHBsaWNhdGlvbnMuIEZvciBleGFtcGxlLFxuICAgIC8vIDxsaSBuZy1jbGFzcz1cInsgYWN0aXZlOiAkc3RhdGUuaW5jbHVkZXMoJ2NvbnRhY3RzLmxpc3QnKSB9XCI+IHdpbGwgc2V0IHRoZSA8bGk+XG4gICAgLy8gdG8gYWN0aXZlIHdoZW5ldmVyICdjb250YWN0cy5saXN0JyBvciBvbmUgb2YgaXRzIGRlY2VuZGVudHMgaXMgYWN0aXZlLlxuICAgICRyb290U2NvcGVbJyRzdGF0ZSddID0gJHN0YXRlO1xuICAgICRyb290U2NvcGVbJyRzdGF0ZVBhcmFtcyddID0gJHN0YXRlUGFyYW1zO1xuIFxuICAgICRsb2cuZGVidWcoJ3J1bkJsb2NrIGVuZCcpO1xuICB9XG5cbiAgLyoqIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBjb25maWcoJGxvZ1Byb3ZpZGVyOiBhbmd1bGFyLklMb2dQcm92aWRlciwgdG9hc3RyQ29uZmlnOiBhbnkpIHtcbiAgICAvLyBlbmFibGUgbG9nXG4gICAgJGxvZ1Byb3ZpZGVyLmRlYnVnRW5hYmxlZCh0cnVlKTtcbiAgICAvLyBzZXQgb3B0aW9ucyB0aGlyZC1wYXJ0eSBsaWJcbiAgICB0b2FzdHJDb25maWcuYWxsb3dIdG1sID0gdHJ1ZTtcbiAgICB0b2FzdHJDb25maWcudGltZU91dCA9IDMwMDA7XG4gICAgdG9hc3RyQ29uZmlnLnBvc2l0aW9uQ2xhc3MgPSAndG9hc3QtdG9wLXJpZ2h0JztcbiAgICB0b2FzdHJDb25maWcucHJldmVudER1cGxpY2F0ZXMgPSB0cnVlO1xuICAgIHRvYXN0ckNvbmZpZy5wcm9ncmVzc0JhciA9IHRydWU7XG4gIH1cblxuICAvKiogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIHJvdXRlckNvbmZpZygkc3RhdGVQcm92aWRlcjogYW5ndWxhci51aS5JU3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyOiBhbmd1bGFyLnVpLklVcmxSb3V0ZXJQcm92aWRlcikge1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ21haW4nLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbWFpbi9tYWluLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnTWFpbkNvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICdtYWluJ1xuICAgICAgfSk7XG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdBbmltYXRlJyxcbiAgICAnbmdUb3VjaCcsXG4gICAgJ25nU2FuaXRpemUnLFxuICAgICduZ01lc3NhZ2VzJyxcbiAgICAndWkucm91dGVyJyxcbiAgICAndWkuYm9vdHN0cmFwJyxcbiAgICAndG9hc3RyJyxcbiAgICAnYXBwLmNvbnRhY3RzJ1xuICBdKVxuICAgIC5jb25maWcoY29uZmlnKVxuICAgIC5jb25maWcocm91dGVyQ29uZmlnKVxuICAgIC5ydW4ocnVuQmxvY2spXG4gICAgLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpXG4gICAgLmRpcmVjdGl2ZSgnbWFpbk5hdmJhcicsIG1haW5OYXZiYXIpO1xuXG4gIGNvbnN0IGFwcENvbnRhaW5lciA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnbmctc3RyaWN0LWRpJywgJ3RydWUnKTtcbiAgYW5ndWxhci5ib290c3RyYXAoYXBwQ29udGFpbmVyLCBbJ2FwcCddKTtcbn1cbiIsInZhciBtYWluXzEgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvbWFpbi9tYWluJyk7XG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvY29udGFjdHMvY29udGFjdHMnKTtcbnZhciBuYXZiYXJfZGlyZWN0aXZlXzEgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5kaXJlY3RpdmUnKTtcbnZhciBhcHA7XG4oZnVuY3Rpb24gKGFwcCkge1xuICAgIGZ1bmN0aW9uIHJ1bkJsb2NrKCRyb290U2NvcGUsICRsb2csICRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgICRyb290U2NvcGVbJyRzdGF0ZSddID0gJHN0YXRlO1xuICAgICAgICAkcm9vdFNjb3BlWyckc3RhdGVQYXJhbXMnXSA9ICRzdGF0ZVBhcmFtcztcbiAgICAgICAgJGxvZy5kZWJ1ZygncnVuQmxvY2sgZW5kJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbmZpZygkbG9nUHJvdmlkZXIsIHRvYXN0ckNvbmZpZykge1xuICAgICAgICAkbG9nUHJvdmlkZXIuZGVidWdFbmFibGVkKHRydWUpO1xuICAgICAgICB0b2FzdHJDb25maWcuYWxsb3dIdG1sID0gdHJ1ZTtcbiAgICAgICAgdG9hc3RyQ29uZmlnLnRpbWVPdXQgPSAzMDAwO1xuICAgICAgICB0b2FzdHJDb25maWcucG9zaXRpb25DbGFzcyA9ICd0b2FzdC10b3AtcmlnaHQnO1xuICAgICAgICB0b2FzdHJDb25maWcucHJldmVudER1cGxpY2F0ZXMgPSB0cnVlO1xuICAgICAgICB0b2FzdHJDb25maWcucHJvZ3Jlc3NCYXIgPSB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiByb3V0ZXJDb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdtYWluJywge1xuICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbWFpbi9tYWluLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ01haW5Db250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ21haW4nXG4gICAgICAgIH0pO1xuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgfVxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgICAgICduZ0FuaW1hdGUnLFxuICAgICAgICAnbmdUb3VjaCcsXG4gICAgICAgICduZ1Nhbml0aXplJyxcbiAgICAgICAgJ25nTWVzc2FnZXMnLFxuICAgICAgICAndWkucm91dGVyJyxcbiAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgICAgICd0b2FzdHInLFxuICAgICAgICAnYXBwLmNvbnRhY3RzJ1xuICAgIF0pXG4gICAgICAgIC5jb25maWcoY29uZmlnKVxuICAgICAgICAuY29uZmlnKHJvdXRlckNvbmZpZylcbiAgICAgICAgLnJ1bihydW5CbG9jaylcbiAgICAgICAgLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpXG4gICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIG1haW5fMS5NYWluQ29udHJvbGxlcilcbiAgICAgICAgLmRpcmVjdGl2ZSgnbWFpbk5hdmJhcicsIG5hdmJhcl9kaXJlY3RpdmVfMS5tYWluTmF2YmFyKTtcbiAgICB2YXIgYXBwQ29udGFpbmVyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ25nLXN0cmljdC1kaScsICd0cnVlJyk7XG4gICAgYW5ndWxhci5ib290c3RyYXAoYXBwQ29udGFpbmVyLCBbJ2FwcCddKTtcbn0pKGFwcCB8fCAoYXBwID0ge30pKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
